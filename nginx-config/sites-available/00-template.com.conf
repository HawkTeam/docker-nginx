# -*- mode: conf -*-
# vi: set ft=conf :

upstream example.com {
    server app_01:80;
}

# Custom log format
log_format example_com_custom '$remote_addr - $remote_user [$time_iso8601] '
    '"$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" ';

proxy_cache_path /tmp/example_com_cache levels=1:2 keys_zone=example_com_cache:60m max_size=1G;

# HTTP Server
server {
    listen      80;
    listen      [::]:80;
    server_name example.com www.example.com;

    # Redirect http to https
    #return 301 https://$server_name$request_uri;

    # Custom log format
    access_log /var/log/nginx/access_aa_dummy.log example_com_custom;

    pagespeed on;

    location / {
        proxy_pass  http://example.com;

        include conf.d/proxy_params.conf;

        client_max_body_size 10m;
        client_body_buffer_size 128k;

        # expires off;
    }

    # Caching image. Ignore access log
    location ~*\.(jpg|jpeg|gif|webp|css|png|js|ico|html|woff)$ {
        proxy_pass  http://example.com;

        proxy_cache          example_com_cache;
        proxy_cache_key      $host$uri$is_args$args;
        proxy_cache_valid    200 301 302 30m;

        expires              30d;
        access_log off;
    }

    # Webroot for Let's Encrypt Validation
    location ~ /.well-known {
        root /var/www/html;
        allow all;
    }

    error_page 500 503 504 /custom-50x.html;
    location = /custom-50x.html {
        root /etc/nginx/error-messages;
        internal;
    }

    error_page 502 /custom_502.html;
    location = /custom_502.html {
        root /etc/nginx/error-messages;
        internal;
    }

    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" { add_header "" ""; }
    location ~ "^/ngx_pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" {
        access_log off;
    }

    location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
    location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }
    location /pagespeed_console { allow 127.0.0.1; deny all; }

    #auth_basic "Password Protected";
    #auth_basic_user_file /etc/nginx/conf.d/passwords;
}

# HTTPS Server
server {
    listen      443 ssl http2;
    listen      [::]:443 ssl http2;
    server_name example.com www.example.com;

    # keepalive_timeout 70;

    # SSL configuration
    include conf.d/ssl_params.conf;

    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # Custom log format
    access_log /var/log/nginx/access_aa_dummy.log example_com_custom;

    pagespeed on;

    location / {
        proxy_pass  http://example.com;

        include conf.d/proxy_params.conf;

        client_max_body_size 10m;
        client_body_buffer_size 128k;

        # expires off;
    }

    # Caching image. Ignore access log
    location ~*\.(jpg|jpeg|gif|webp|css|png|js|ico|html|woff)$ {
        proxy_pass  http://example.com;

        proxy_cache          example_com_cache;
        proxy_cache_key      $host$uri$is_args$args;
        proxy_cache_valid    200 301 302 30m;

        expires              30d;
        access_log off;
    }

    # Webroot for Let's Encrypt Validation
    location ~ /.well-known {
        root /var/www/html;
        allow all;
    }

    error_page 500 503 504 /custom-50x.html;
    location = /custom-50x.html {
        root /etc/nginx/error-messages;
        internal;
    }

    error_page 502 /custom_502.html;
    location = /custom_502.html {
        root /etc/nginx/error-messages;
        internal;
    }

    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" { add_header "" ""; }
    location ~ "^/ngx_pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" {
        access_log off;
    }

    location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
    location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }
    location /pagespeed_console { allow 127.0.0.1; deny all; }

    #auth_basic "Password Protected";
    #auth_basic_user_file /etc/nginx/conf.d/passwords;
}
